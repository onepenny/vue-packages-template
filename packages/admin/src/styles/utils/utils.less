/**
 * Less utils
 * 基本工具：常用的属性集
 */
 @charset 'utf-8';

 @import 'global';
 
 //	position			定位
 //	layout				布局
 //	margin & padding	补白
 //	border				边框
 //	background			背景
 //	font & color		字体和颜色
 //	text & other		文本、文本装
 //	list				列表
 //	user interface		用户界面
 //	transform			变换
 //	transition			过渡
 
 // position 定位
 .pos-r(){
     position: relative;
 }
 
 .pos-a(@zIndex: 1; @top: 0; @left: 0) when (isnumber(@zIndex)){
     position: absolute;
     z-index: @zIndex;
     top: @top;
     left: @left;
 }
 .pos-atr(@zIndex: 1; @top: 0; @right: 0) when (isnumber(@zIndex)){
     position: absolute;
     z-index: @zIndex;
     top: @top;
     right: @right;
 }
 .pos-abl(@zIndex: 1; @bottom: 0; @left: 0) when (isnumber(@zIndex)){
     position: absolute;
     z-index: @zIndex;
     bottom: @bottom;
     left: @left;
 }
 .pos-abr(@zIndex: 1; @bottom: 0; @right: 0) when (isnumber(@zIndex)){
     position: absolute;
     z-index: @zIndex;
     bottom: @bottom;
     right: @right;
 }
 .pos-a() when (default()){
     position: absolute;
 }
 
 .pos-f(@zIndex; @top: 0; @left: 0) when (@zIndex){
     position: fixed;
     z-index: @zIndex;
 }
 .pos-f() when (default()){
     position: fixed;
 }
 
 // layout 布局
 // display
 .db(){
     display: block;
 }
 .dib(){
     display: inline-block;
 }
 .di(){
     display: inline;
 }
 .dn(){
     display: none;
 }
 
 // float 浮动
 .fl-lt(){
     float: left;
 }
 .fl-rt(){
     float: right;
 }
 .no-fl(){
     float: none;
 }
 // 清除浮动
 .clear-fix(){
     .db();
     clear: both;
 }
 //
 // visibility	可视性
 //	visible		可见
 //	hidden		隐藏
 //	collapse
 //
 .visibility(@val: visible) when ( iskeyword(@val) ){
     visibility: @val;
 }
 // overflow
 .of(@val: auto) when ( iskeyword(@val) ){
     overflow: @val;
 }
 .ofx(@val: auto) when ( iskeyword(@val) ){
     overflow-x: @val;
 }
 .ofy(@val: auto) when ( iskeyword(@val) ){
     overflow-y: @val;
 }
 
 // width, height & line-height
 .wh(@width: auto; @height: auto){
     width: @width;
     height: @height;
 }
 .hlh(@height: auto){
     height: @height;
     line-height: @height;
 }
 .hlh(@height: auto; @lineHeight: normal){
     height: @height;
     line-height: @lineHeight;
 }
 .whlh(@width: auto; @height: auto){
     .wh(@width: @width; @height: @height);
     line-height: @height;
 }
 .whlh(@width: auto; @height: auto; @lineHeight: normal){
     .wh(@width: @width; @height: @height);
     line-height: @lineHeight;
 }
 
 // margin & padding 补白
 .mg(@margin){
     margin: @margin;
 }
 .mg(@top, @right){
    margin: @top @right;
}
 .mgt(@val: 0) when ( isnumber(@val) ) {
     margin-top: @val;
 }
 .mgr(@val: 0) when ( isnumber(@val) ) {
     margin-right: @val;
 }
 .mgb(@val: 0) when ( isnumber(@val) ) {
     margin-bottom: @val;
 }
 .mgl(@val: 0) when ( isnumber(@val) ) {
     margin-left: @val;
 }
 
 .pd(@padding){
     padding: @padding;
 }
 .pd(@top, @right){
     padding: @top @right;
 }
 .pdt(@val: 0) when ( isnumber(@val) ) {
     padding-top: @val;
 }
 .pdr(@val: 0) when ( isnumber(@val) ) {
     padding-right: @val;
 }
 .pdb(@val: 0) when ( isnumber(@val) ) {
     padding-bottom: @val;
 }
 .pdl(@val: 0) when ( isnumber(@val) ) {
     padding-left: @val;
 }
 
 // border 边框
 .no-brd(){
     border: none;
 }
 .no-brd-t(){
     border-top: none;
 }
 .no-brd-r(){
     border-right: none;
 }
 .no-brd-b(){
     border-bottom: none;
 }
 .no-brd-l(){
     border-left: none;
 }
 .brd(@borderWidth; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0px) {
     .no-brd();
 }
 .brd(@borderWidth; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0) {
     .no-brd();
 }
 .brd(@borderWidth: 1px; @borderStyle: solid; @borderColor: @black)
     when (@borderWidth > 0px){
     border: @arguments;
 }
 .brd(@borderColor: @black) when (iscolor(@borderColor)){
     .brd(1px, solid, @borderColor);
 }
 
 .brd-t(@borderWidth ; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0px) {
     .no-brd-t();
 }
 .brd-t(@borderWidth ; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0) {
     .no-brd-t();
 }
 .brd-t(@borderWidth: 1px; @borderStyle: solid; @borderColor: @black)
     when (@borderWidth > 0px){
     border-top: @arguments;
 }
 .brd-t(@borderColor: @black) when (iscolor(@borderColor)){
     .brd-t(1px, solid, @borderColor);
 }
 
 .brd-r(@borderWidth ; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0px) {
     .no-brd-r();
 }
 .brd-r(@borderWidth ; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0) {
     .no-brd-r();
 }
 .brd-r(@borderWidth: 1px; @borderStyle: solid; @borderColor: @black)
     when (@borderWidth > 0px){
     border-right: @arguments;
 }
 .brd-r(@borderColor: @black) when (iscolor(@borderColor)){
     .brd-r(1px, solid, @borderColor);
 }
 
 .brd-b(@borderWidth ; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0px) {
     .no-brd-b();
 }
 .brd-b(@borderWidth ; @borderStyle; @borderColor)
     when (isnumber(@borderWidth)) and (@borderWidth = 0) {
     .no-brd-b();
 }
 .brd-b(@borderWidth: 1px; @borderStyle: solid; @borderColor: @black)
     when (@borderWidth > 0px){
     border-bottom: @arguments;
 }
 .brd-b(@borderColor: @black) when (iscolor(@borderColor)){
     .brd-b(1px, solid, @borderColor);
 }
 
 .brd-l(@borderWidth ; @borderStyle; @borderColor;)
     when (isnumber(@borderWidth)) and (@borderWidth = 0px) {
     .no-brd-l();
 }
 .brd-l(@borderWidth ; @borderStyle; @borderColor;)
     when (isnumber(@borderWidth)) and (@borderWidth = 0) {
     .no-brd-l();
 }
 .brd-l(@borderWidth: 1px; @borderStyle: solid; @borderColor: @black)
     when (@borderWidth > 0px){
     border-left: @arguments;
 }
 .brd-l(@borderColor: @black) when (iscolor(@borderColor)){
     .brd-l(1px, solid, @borderColor);
 }
 
 // border-radius
 .no-brdr(){
     border-radius: none;
 }
 .brdr(@radius) when (isnumber(@radius)) and (@radius = 0){
     .no-brdr();
 }
 .brdr(@radius) when (isnumber(@radius)) and (@radius = 0px){
     .no-brdr();
 }
 .brdr(@radius) when (default()) {
     border-radius: @radius;
 }
 
 // background 背景
 // background-color
 .bgc(@bgColor){
     background-color: @bgColor;
 }
 
 // background-image 背景图设置（雪碧图）css sprite
 .bgi(@src) when (isstring(@src)){
     background-image: url(@src);
 }
 .sprite(@src; @repeat: no-repeat; @posX: 0; @posY: 0){
     .bgi(@src);
     background-image: url(@src);
     background-repeat: @repeat;
     background-position: @posX @posY;
 }
 
 // font & color 字体和颜色
 // color
 .fgc(@fgColor){
     color: @fgColor;
 }
 
 .ff(@font){
     font-family: @font;
 }
 .bold(){
     font-weight: bold;
 }
 .bolder(){
     font-weight: bolder;
 }
 .lighter(){
     font-weight: lighter;
 }
 
 // font & color & font-weight
 .fs(@size: @rootSize) when (isnumber(@size)){
     font-size: @size;
 }
 .fs(@size) when (default()) {
     font-size: @rootSize;
 }
 .fc(@fontSize: @rootSize; @color: #333333){
     .fs(@fontSize);
     color: @color;
 }
 .fcf(@fontSize: @rootSize; @color: #333333; @fontWeight: normal)
     when ( iskeyword(@fontWeight) ){
     .fc(@fontSize, @color);
     font-weight: @fontWeight;
 }
 
 // text & other 文本、文本装饰等
 // text-align
 .ta-lt(){
     text-align: left;
 }
 .ta-c(){
     text-align: center;
 }
 .ta-rt(){
     text-align: right;
 }
 
 // text-indent
 .ti(@val: 2em) when (isnumber(@val)){
     text-indent: @val;
 }
 .notext(){
     .ti(-10000em);
 }
 
 // vertical-align
 .va(@val: baseline){
     vertical-align: @val;
 }
 .va-t(){
     .va(top);
 }
 .va-m(){
     .va(middle);
 }
 .va-b(){
     .va(bottom);
 }
 
 // line-height
 .lh(@val: normal){
     line-height: @val;
 }
 
 // text-decoration
 .td(@val: none){
     text-decoration: @val;
 }
 
 // list 列表
 // user interface 用户界面
 .ol(@val: none){
     outline: @val;
 }
 .cs(@val: pointer){
     cursor: @val;
 }
 .bs(@type: border-box){
     box-sizing: @type;
 }
 
 // transform 变换
 // 尚空
 
 // transition 过渡
 .transition(@property: all; @duration: 500ms; @function: linear; @delay: 0ms){
     // transition: @property @duration @function @delay;
     transition-property: @property;
     transition-duration: @duration;
     transition-timing-function: @function;
     transition-delay: @delay;
 }
 
 // 文字不换行，溢出自动隐藏
 .nowrap(@width: auto){
     overflow: hidden;
     width: @width;
     text-overflow: ellipsis;
     white-space: nowrap;
 }